import os
from dotenv import load_dotenv
import telebot
from telebot.apihelper import ApiTelegramException
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import datetime
import time
import threading
import logging
from sqlalchemy import create_engine, Column, Integer, String, DateTime, ForeignKey, func, Boolean
from sqlalchemy.orm import declarative_base, sessionmaker, relationship

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine('sqlite:///users.db')
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String)
    payments = relationship("Payment", back_populates="user")

class Payment(Base):
    __tablename__ = 'payments'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    payment_date = Column(DateTime, default=datetime.datetime.utcnow)
    amount = Column(Integer)
    confirmed = Column(Boolean, default=False)
    rejected = Column(Boolean, default=False)
    comment = Column(String)
    month = Column(String)
    user = relationship("User", back_populates="payments")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(engine)

def add_user(user_id, username):
    session = Session()
    user = session.query(User).filter_by(id=user_id).first()
    if not user:
        user = User(id=user_id, username=username)
        session.add(user)
    else:
        user.username = username
    session.commit()
    session.close()

def get_all_users():
    session = Session()
    users = session.query(User).all()
    session.close()
    return [(user.id, user.username) for user in users]

def remove_user(user_id):
    session = Session()
    user = session.query(User).filter_by(id=user_id).first()
    if user:
        session.delete(user)
        session.commit()
    session.close()

def add_payment(user_id, total_amount, months):
    session = Session()
    payments = []
    amount_per_month = total_amount // len(months)
    for month in months:
        payment = Payment(user_id=user_id, amount=amount_per_month, confirmed=False, month=month)
        session.add(payment)
        payments.append(payment)
    session.commit()
    payment_ids = [payment.id for payment in payments]
    session.close()
    return payment_ids

def confirm_payment(payment_id):
    session = Session()
    payment = session.query(Payment).filter_by(id=payment_id).first()
    if payment:
        payment.confirmed = True
        session.commit()
    session.close()

def reject_payment(payment_id, comment):
    session = Session()
    payment = session.query(Payment).filter_by(id=payment_id).first()
    if payment:
        payment.rejected = True
        payment.comment = comment
        session.commit()
        user_id = payment.user_id
    session.close()
    return user_id if payment else None

def get_payments_by_month():
    session = Session()
    payments = session.query(User.username, 
                             Payment.month,
                             func.count('*').label('count'))\
                      .join(Payment)\
                      .filter(Payment.confirmed == True)\
                      .group_by(User.id, Payment.month)\
                      .order_by(Payment.month.desc(), User.username)\
                      .all()
    session.close()
    return [(p.username, p.month, p.count) for p in payments]

def get_last_payment(user_id):
    session = Session()
    last_payment = session.query(Payment)\
                          .filter_by(user_id=user_id, confirmed=True)\
                          .order_by(Payment.payment_date.desc())\
                          .first()
    session.close()
    return last_payment

def is_payment_confirmed_for_month(user_id, month):
    session = Session()
    payment = session.query(Payment)\
                     .filter_by(user_id=user_id, month=month, confirmed=True)\
                     .first()
    session.close()
    return payment is not None

def is_payment_exists_for_month(user_id, month):
    session = Session()
    payment = session.query(Payment)\
                     .filter_by(user_id=user_id, month=month)\
                     .filter((Payment.confirmed == True) | ((Payment.confirmed == False) & (Payment.rejected == False)))\
                     .first()
    session.close()
    return payment is not None

def get_user_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å"))
    keyboard.add(KeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç"))
    keyboard.add(KeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"), KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—ã"))
    keyboard.add(KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –æ–ø–ª–∞—Ç—ã"), KeyboardButton("üîç –ù–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"))
    keyboard.add(KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"))
    return keyboard

def get_last_paid_month(user_id):
    session = Session()
    last_payment = session.query(Payment)\
                          .filter_by(user_id=user_id, confirmed=True)\
                          .order_by(Payment.month.desc())\
                          .first()
    session.close()
    if last_payment:
        return datetime.datetime.strptime(last_payment.month, '%Y-%m')
    return None

def delete_payment(payment_id):
    session = Session()
    payment = session.query(Payment).filter_by(id=payment_id).first()
    if payment:
        session.delete(payment)
        session.commit()
    session.close()

@bot.message_handler(commands=['start'])
def start(message):
    add_user(message.from_user.id, message.from_user.username)
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± –æ–ø–ª–∞—Ç–µ –∫–∞–∂–¥–æ–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞.", reply_markup=get_user_keyboard())
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} (ID: {message.from_user.id})")

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
def status_command(message):
    user_id = message.from_user.id
    last_payment = get_last_payment(user_id)
    if last_payment:
        status_text = f"–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ {last_payment.payment_date.strftime('%Y-%m-%d %H:%M:%S')} –∑–∞ –º–µ—Å—è—Ü {last_payment.month}."
    else:
        status_text = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç."
    bot.reply_to(message, status_text)

@bot.message_handler(func=lambda message: message.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å")
def pay_command(message):
    user_id = message.from_user.id
    last_paid_month = get_last_paid_month(user_id)
    
    if last_paid_month:
        start_date = last_paid_month + datetime.timedelta(days=32)
        start_date = start_date.replace(day=1)
    else:
        start_date = datetime.datetime.now().replace(day=1)
    
    markup = InlineKeyboardMarkup()
    for i in range(1, 13):  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç 1 –¥–æ 12 –º–µ—Å—è—Ü–µ–≤
        end_date = (start_date + datetime.timedelta(days=32*i)).replace(day=1) - datetime.timedelta(days=1)
        period = f"{start_date.strftime('%d.%m.%Y')}-{end_date.strftime('%d.%m.%Y')}"
        markup.add(InlineKeyboardButton(f"{i} –º–µ—Å—è—Ü(–µ–≤) ({period})", callback_data=f"pay_{i}_{start_date.strftime('%Y-%m')}"))
    
    if last_paid_month:
        bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ –¥–æ {last_paid_month.strftime('%d.%m.%Y')}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def handle_pay_selection(call):
    _, num_months, start_month = call.data.split('_')
    num_months = int(num_months)
    amount = num_months * 100  # 100 RUB –∑–∞ –º–µ—Å—è—Ü
    
    start_date = datetime.datetime.strptime(start_month, '%Y-%m')
    months = []
    for i in range(num_months):
        current_date = start_date + datetime.timedelta(days=32*i)
        current_date = current_date.replace(day=1)
        end_date = (current_date + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
        months.append((current_date.strftime('%Y-%m'), f"{current_date.strftime('%d.%m.%Y')}-{end_date.strftime('%d.%m.%Y')}"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã
    already_paid_months = [month for month, _ in months if is_payment_exists_for_month(call.from_user.id, month)]
    
    if already_paid_months:
        bot.answer_callback_query(call.id, f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã: {', '.join(already_paid_months)}. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.", show_alert=True)
        return
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{call.from_user.id}_{amount}_{','.join([m for m, _ in months])}"))
    
    periods = ', '.join([period for _, period in months])
    bot.edit_message_text(f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} RUB –∑–∞ –ø–µ—Ä–∏–æ–¥—ã: {periods}\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:",
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())

@bot.message_handler(func=lambda message: message.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å")
def user_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:", reply_markup=get_user_keyboard())

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and message.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def admin_users_list(message):
    users = get_all_users()
    user_list = "\n".join([f"{user[1]} (ID: {user[0]})" for user in users])
    bot.reply_to(message, f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{user_list}")

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç")
def admin_payments_stats(message):
    session = Session()
    payments = session.query(Payment, User)\
                      .join(User)\
                      .filter(Payment.confirmed == True)\
                      .order_by(User.username, Payment.payment_date)\
                      .all()
    session.close()

    stats = {}
    for payment, user in payments:
        if user.username not in stats:
            stats[user.username] = []
        stats[user.username].append({
            'date': payment.payment_date,
            'month': payment.month,
            'amount': payment.amount
        })

    response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç:\n\n"
    for username, user_payments in stats.items():
        response += f"{username}:\n"
        for payment in user_payments:
            response += f" - {payment['date'].strftime('%d.%m.%Y')}: {payment['month']} ({payment['amount']} RUB)\n"
        response += "\n"

    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and message.text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def admin_send_notification(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    bot.register_next_step_handler(msg, process_notification_text)

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—ã")
def admin_confirm_payments(message):
    confirm_payments_menu(message)

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –æ–ø–ª–∞—Ç—ã")
def admin_delete_payments(message):
    session = Session()
    payments = session.query(Payment, User)\
                      .join(User)\
                      .order_by(User.username, Payment.month)\
                      .all()
    session.close()

    if not payments:
        bot.reply_to(message, "–ù–µ—Ç –æ–ø–ª–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    markup = InlineKeyboardMarkup()
    for payment, user in payments:
        button_text = f"{user.username} - {payment.month} ({payment.amount} RUB)"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"delete_payment_{payment.id}"))

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_payment_'))
def delete_specific_payment(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    payment_id = int(call.data.split('_')[2])
    delete_payment(payment_id)
    bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

def process_notification_text(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    notification_text = message.text
    send_notification_to_all(notification_text)
    bot.reply_to(message, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

def send_notification_to_all(message):
    users = get_all_users()
    for user_id, username in users:
        try:
            bot.send_message(user_id, message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} (ID: {user_id})")
        except ApiTelegramException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} (ID: {user_id}): {e}")

def send_reminders():
    current_date = datetime.datetime.now()
    current_month = current_date.strftime('%Y-%m')
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {current_date}")
    if current_date.day == 1:
        for user_id, username in get_all_users():
            if not is_payment_confirmed_for_month(user_id, current_month):
                try:
                    markup = InlineKeyboardMarkup()
                    markup.row(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_1_{current_month}"))
                    bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ {current_month}.", reply_markup=markup)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} (ID: {user_id})")
                except ApiTelegramException as e:
                    if e.error_code == 403:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                        remove_user(user_id)
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('paid_'))
def handle_payment(call):
    _, user_id, amount, months = call.data.split('_')
    user_id = int(user_id)
    amount = int(amount)
    months = months.split(',')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞
    already_paid_months = [month for month in months if is_payment_exists_for_month(user_id, month)]
    if already_paid_months:
        bot.answer_callback_query(call.id, f"–û–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü—ã {', '.join(already_paid_months)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω.", show_alert=True)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        return
    
    payment_ids = add_payment(user_id, amount, months)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username} (ID: {user_id}) –∑–∞ –º–µ—Å—è—Ü—ã: {', '.join(months)}")
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –µ—ë.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ
    bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username} (ID: {user_id}) –∑–∞ –º–µ—Å—è—Ü—ã: {', '.join(months)}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—ã' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

def confirm_payments_menu(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    session = Session()
    unconfirmed_payments = session.query(Payment, User).join(User).filter(Payment.confirmed == False, Payment.rejected == False).all()
    session.close()

    if not unconfirmed_payments:
        bot.reply_to(message, "–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç.")
        return

    grouped_payments = {}
    for payment, user in unconfirmed_payments:
        key = (user.id, user.username, payment.payment_date)
        if key not in grouped_payments:
            grouped_payments[key] = []
        grouped_payments[key].append(payment)

    for (user_id, username, payment_date), payments in grouped_payments.items():
        total_amount = sum(payment.amount for payment in payments)
        months = ", ".join(payment.month for payment in payments)
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{'_'.join([str(p.id) for p in payments])}"),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{'_'.join([str(p.id) for p in payments])}")
        )
        bot.send_message(message.chat.id, 
                         f"–û–ø–ª–∞—Ç–∞ –æ—Ç {username} (ID: {user_id})\n"
                         f"–î–∞—Ç–∞: {payment_date}\n"
                         f"–ú–µ—Å—è—Ü—ã: {months}\n"
                         f"–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} RUB", 
                         reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_payment_'))
def confirm_specific_payment(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    payment_ids = [int(pid) for pid in call.data.split('_')[2:]]
    for payment_id in payment_ids:
        confirm_payment(payment_id)
    bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_payment_'))
def reject_specific_payment(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    payment_ids = [int(pid) for pid in call.data.split('_')[2:]]
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:")
    bot.register_next_step_handler(msg, process_reject_comment, payment_ids)

def process_reject_comment(message, payment_ids):
    comment = message.text
    user_id = None
    for payment_id in payment_ids:
        user_id = reject_payment(payment_id, comment)
    if user_id:
        bot.send_message(message.chat.id, "–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"pay_1_{datetime.datetime.now().strftime('%Y-%m')}"))
        bot.send_message(user_id, f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
        
@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and message.text == "üîç –ù–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
def users_without_payment(message):
    current_month = datetime.datetime.now().strftime('%Y-%m')
    session = Session()
    users_with_payment = session.query(User.id).join(Payment).filter(
        Payment.month == current_month,
        Payment.confirmed == True
    ).distinct()
    
    users_without_payment = session.query(User).filter(~User.id.in_(users_with_payment)).all()
    session.close()

    if not users_without_payment:
        bot.reply_to(message, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–Ω–µ—Å–ª–∏ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ.")
    else:
        response = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ –≤–Ω–µ—Å—à–∏–µ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ:\n\n"
        for user in users_without_payment:
            response += f"- {user.username} (ID: {user.id})\n"
        bot.reply_to(message, response)

def main():
    while True:
        try:
            send_reminders()
            time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            time.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    reminder_thread = threading.Thread(target=main)
    reminder_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True, interval=0, timeout=20)